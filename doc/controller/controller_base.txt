https://symfony.com/doc/3.4/controller.html

Génération d'une URL : $url = $this->generateUrl('blog_show', array('slug' => 'slug-value'));

Différent type de redirection :
public function indexAction()
{
    // redirects to the "homepage" route
    return $this->redirectToRoute('homepage');

    // does a permanent - 301 redirect
    return $this->redirectToRoute('homepage', array(), 301);

    // redirects to a route with parameters
    return $this->redirectToRoute('blog_show', array('slug' => 'my-page'));

    // redirects externally
    return $this->redirect('http://symfony.com/doc');
}




Il existe de nombreux objets symfony qui s'appellent des "services" (https://symfony.com/doc/3.4/service_container.html)
On les utilise en les passant simplement en paramètre à la fonction 
public function numberAction($max, LoggerInterface $logger) pour le service LoggerInterface
Pour voir la liste complète des services : php bin/console debug:autowiring





Si on a extendu la classe de base Controller on peut appeler différent services Symfony par la méthode get. Les plus courants sont :
$templating = $this->get('templating');

$router = $this->get('router');

$mailer = $this->get('mailer');

// you can also fetch parameters
$someParameter = $this->getParameter('some_parameter');



Pour créer une erreur 404 personnalisée : throw $this->createNotFoundException('The product does not exist');
// this exception ultimately generates a 500 status error
throw new \Exception('Something went wrong!');
Pour plus d'info : https://symfony.com/doc/3.4/controller/error_pages.html




Pour pouvoir lire des paramètres de la query, un fichier, etc il faut lire l'object Request
Pour cela on le passe en paramètre à la fonction, puis on fait un get dessus
public function indexAction(Request $request, $firstName, $lastName)
{
    $page = $request->query->get('page', 1);

    // ...
}




Lire/écrire des info sur une session utilisateur :
use Symfony\Component\HttpFoundation\Session\SessionInterface;

public function indexAction(SessionInterface $session)
{
    // stores an attribute for reuse during a later user request
    $session->set('foo', 'bar');

    // gets the attribute set by another controller in another request
    $foobar = $session->get('foobar');

    // uses a default value if the attribute doesn't exist
    $filters = $session->get('filters', array());
}




Pour afficher des messages flash (notification par exemple) à l'utilisateur il faut d'abord le définir : par exemple, l'utilisateur remplit un formulaire, on génère le message flash puis on le redirige
On utilise souvent notice, error, warning en nom de messages flash, mais tout est possible
		$this->addFlash(
            'notice',
            'Your changes were saved!'
        );
Sur la page après redirection (twig)
{# app/Resources/views/base.html.twig #}

{# you can read and display just one flash message type... #}
{% for message in app.flashes('notice') %}
    <div class="flash-notice">
        {{ message }}
    </div>
{% endfor %}

{# ...or you can read and display every flash message available #}
{% for label, messages in app.flashes %}
    {% for message in messages %}
        <div class="flash-{{ label }}">
            {{ message }}
        </div>
    {% endfor %}
{% endfor %}



Voici plusieurs informations que l'on peut lire à travers l'object Request
use Symfony\Component\HttpFoundation\Request;

public function indexAction(Request $request)
{
    $request->isXmlHttpRequest(); // is it an Ajax request?

    $request->getPreferredLanguage(array('en', 'fr'));

    // retrieves GET and POST variables respectively
    $request->query->get('page');
    $request->request->get('page');

    // retrieves SERVER variables
    $request->server->get('HTTP_HOST');

    // retrieves an instance of UploadedFile identified by foo
    $request->files->get('foo');

    // retrieves a COOKIE value
    $request->cookies->get('PHPSESSID');

    // retrieves an HTTP request header, with normalized, lowercase keys
    $request->headers->get('host');
    $request->headers->get('content_type');
}

Et à travers l'object Response
use Symfony\Component\HttpFoundation\Response;

// creates a simple Response with a 200 status code (the default)
$response = new Response('Hello '.$name, Response::HTTP_OK);

// creates a CSS-response with a 200 status code
$response = new Response('<style> ... </style>');
$response->headers->set('Content-Type', 'text/css');



JSON helper : permet de retourner l'object JsonResponse et d'encoder en JSON :
public function indexAction()
{
    // returns '{"username":"jane.doe"}' and sets the proper Content-Type header
    return $this->json(array('username' => 'jane.doe'));
	
	
	
Lire, écrire, télécharger des fichiers :
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;

public function fileAction()
{
    // load the file from the filesystem
    $file = new File('/path/to/some_file.pdf');

    return $this->file($file);

    // rename the downloaded file
    return $this->file($file, 'custom_name.pdf');

    // display the file contents in the browser instead of downloading it
    return $this->file('invoice_3241.pdf', 'my_invoice.pdf', ResponseHeaderBag::DISPOSITION_INLINE);
}