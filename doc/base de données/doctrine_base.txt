Les interactions avec les bases de données sont font avec un outil tiers appelé Doctrine.

Le fichier de configuration contenant les accès à la base se situe dans 
C:\wamp64\www\CalimeroTest\app\config\parameters.yml

Pour créer une base de données, il suffit de faire dans la console php bin/console doctrine:database:create
Pour supprimer une base : doctrine:database:drop --force

Tuto : https://symfony.com/doc/3.4/doctrine.html
Exemple : C:\wamp64\www\CalimeroTest\src\Calimero\userBundle\Entity\Utilisateurs.php

On commence par créer une entité (entity) qui est une classe représentant la table de la base de données
On y ajoute ensuite les informations de mapping sous forme d'annotations
Pour la table :
/** 
* @ORM\Entity
* @ORM\Table(name="utilisateurs")
*/

Pour les champs
	/** 
	* @ORM\Column(type="integer")
	* @ORM\Id
	* @ORM\GeneratedValue(strategy="AUTO")
	*/
	
On peut ensuite tester si le schéma est correct avec la commande
doctrine:schema:validate

Si c'est ok, il ne reste plus qu'à créer les getter et les setter
On peut ensuite faire la création de la table en base de données à partir du schema
doctrine:schema:update --force


Tout ce processus peut être automatisé avec la commande doctrine:generate:entity


Pour enregistrer des données en base, on initialise l'entityManager
	$entityManager = $this->getDoctrine()->getManager();
	
On créé ensuite un nouvel object
		
		$utilisateurs = new Utilisateurs();
		$utilisateurs->setUtilisateur('Admin');
		$utilisateurs->setNewsletter(true);
		$utilisateurs->setDateCreation();
		
On dit à Doctrine qu'on veut voir s'il est possible de sauvegarder (sans le faire)
		$entityManager->persist($utilisateurs);

On enregistre en base		
		$entityManager->flush();
		

Pour les lire, 2 méthodes :
la plus compliquée à comprendre mais la plus simple une fois qu'on a bien saisi : https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html
la plus simple à comprendre et celle utilisée pour le moment
	public function showAction($userId)
	{
		$utilisateurs = $this->getDoctrine()
			->getRepository(Utilisateurs::class)
			->find($userId);

		if (!$utilisateurs) {
			throw $this->createNotFoundException(
				'No user found for id '.$userId);
        };
		
		return new Response('Username for id '. $userId .' : '.$utilisateurs->getUtilisateur());
	}
	
	
Il est possible d'accéder à un objet par un repository
$repository = $this->getDoctrine()
    ->getRepository(Utilisateurs::class);	
	
Une fois qu'on l'a fait, on peut effectuer plusieurs actions
// looks for a single product by its primary key (usually "id")
$product = $repository->find($productId);

// dynamic method names to find a single product based on a column value
$product = $repository->findOneById($productId);
$product = $repository->findOneByName('Keyboard');

// dynamic method names to find a group of products based on a column value
$products = $repository->findByPrice(19.99);

// finds *all* products
$products = $repository->findAll();

// looks for a single product matching the given name and price
$product = $repository->findOneBy(
    array('name' => 'Keyboard', 'price' => 19.99)
);

// looks for multiple products matching the given name, ordered by price
$products = $repository->findBy(
    array('name' => 'Keyboard'),
    array('price' => 'ASC')
);


La mise à jour d'un champ se fait avec
	$product->setName('New product name!');
    $entityManager->flush();
	
Le delete avec
	$entityManager->remove($product);
	$entityManager->flush();
	

	
Pour faire du requêtage, on utilise le langage DQL (Doctrine Query Language) qui est très proche du SQL
Mais qui se base sur des objets PHP au lieu des tables

$query = $entityManager->createQuery(
    'SELECT p
    FROM AppBundle:Product p
    WHERE p.price > :price
    ORDER BY p.price ASC'
)->setParameter('price', 19.99);

$products = $query->getResult();

Si on ne veut qu'une seule ligne au lieu d'un array
$product = $query->setMaxResults(1)->getOneOrNullResult();



On peut utiliser le Query Builder, qui permet de facilement faire du dynamique, du passage à plusieurs fonctions, etc

$repository = $this->getDoctrine()
    ->getRepository(Product::class);

// createQueryBuilder() automatically selects FROM AppBundle:Product
// and aliases it to "p"
$query = $repository->createQueryBuilder('p')
    ->where('p.price > :price')
    ->setParameter('price', '19.99')
    ->orderBy('p.price', 'ASC')
    ->getQuery();

$products = $query->getResult();